import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import './stencil.core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface SaCardComplex {
      'hasFooter': boolean;
      'headerTitle': string;
    }
  }

  interface HTMLSaCardComplexElement extends StencilComponents.SaCardComplex, HTMLStencilElement {}

  var HTMLSaCardComplexElement: {
    prototype: HTMLSaCardComplexElement;
    new (): HTMLSaCardComplexElement;
  };
  interface HTMLElementTagNameMap {
    'sa-card-complex': HTMLSaCardComplexElement;
  }
  interface ElementTagNameMap {
    'sa-card-complex': HTMLSaCardComplexElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-card-complex': JSXElements.SaCardComplexAttributes;
    }
  }
  namespace JSXElements {
    export interface SaCardComplexAttributes extends HTMLAttributes {
      'hasFooter'?: boolean;
      'headerTitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaChrome {
      'env': string;
      'hasNav': boolean;
      'hasSecondaryTool': boolean;
      'hasTool': boolean;
      'menuItems': string;
      'secondaryToolName': string;
      'toolName': string;
      'url': string;
      'username': string;
    }
  }

  interface HTMLSaChromeElement extends StencilComponents.SaChrome, HTMLStencilElement {}

  var HTMLSaChromeElement: {
    prototype: HTMLSaChromeElement;
    new (): HTMLSaChromeElement;
  };
  interface HTMLElementTagNameMap {
    'sa-chrome': HTMLSaChromeElement;
  }
  interface ElementTagNameMap {
    'sa-chrome': HTMLSaChromeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-chrome': JSXElements.SaChromeAttributes;
    }
  }
  namespace JSXElements {
    export interface SaChromeAttributes extends HTMLAttributes {
      'env'?: string;
      'hasNav'?: boolean;
      'hasSecondaryTool'?: boolean;
      'hasTool'?: boolean;
      'menuItems'?: string;
      'onMenuItemSelectedFromChrome'?: (event: CustomEvent) => void;
      'secondaryToolName'?: string;
      'toolName'?: string;
      'url'?: string;
      'username'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaFooter {

    }
  }

  interface HTMLSaFooterElement extends StencilComponents.SaFooter, HTMLStencilElement {}

  var HTMLSaFooterElement: {
    prototype: HTMLSaFooterElement;
    new (): HTMLSaFooterElement;
  };
  interface HTMLElementTagNameMap {
    'sa-footer': HTMLSaFooterElement;
  }
  interface ElementTagNameMap {
    'sa-footer': HTMLSaFooterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-footer': JSXElements.SaFooterAttributes;
    }
  }
  namespace JSXElements {
    export interface SaFooterAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaImageUploader {
      'byteSizeLimit': number;
      'imageUrl': string;
      'isDraggable': boolean;
      'sizeLimitText': string;
      'uploadButtonText': string;
    }
  }

  interface HTMLSaImageUploaderElement extends StencilComponents.SaImageUploader, HTMLStencilElement {}

  var HTMLSaImageUploaderElement: {
    prototype: HTMLSaImageUploaderElement;
    new (): HTMLSaImageUploaderElement;
  };
  interface HTMLElementTagNameMap {
    'sa-image-uploader': HTMLSaImageUploaderElement;
  }
  interface ElementTagNameMap {
    'sa-image-uploader': HTMLSaImageUploaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-image-uploader': JSXElements.SaImageUploaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SaImageUploaderAttributes extends HTMLAttributes {
      'byteSizeLimit'?: number;
      'imageUrl'?: string;
      'isDraggable'?: boolean;
      'onImageUploaderOnUpload'?: (event: CustomEvent) => void;
      'onRemoveImage'?: (event: CustomEvent) => void;
      'sizeLimitText'?: string;
      'uploadButtonText'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaModal {
      'closeModal': () => void;
      'hasActions': boolean;
      'id': string;
      'isSmall': boolean;
      'launchModal': () => void;
      'primaryActionText': string;
      'primaryDisabled': boolean;
      'primaryTitle': string;
      'secondaryActionText': string;
      'secondaryDisabled': boolean;
      'secondaryTitle': string;
    }
  }

  interface HTMLSaModalElement extends StencilComponents.SaModal, HTMLStencilElement {}

  var HTMLSaModalElement: {
    prototype: HTMLSaModalElement;
    new (): HTMLSaModalElement;
  };
  interface HTMLElementTagNameMap {
    'sa-modal': HTMLSaModalElement;
  }
  interface ElementTagNameMap {
    'sa-modal': HTMLSaModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-modal': JSXElements.SaModalAttributes;
    }
  }
  namespace JSXElements {
    export interface SaModalAttributes extends HTMLAttributes {
      'hasActions'?: boolean;
      'id'?: string;
      'isSmall'?: boolean;
      'onModalClosed'?: (event: CustomEvent) => void;
      'onModalPrimaryAction'?: (event: CustomEvent) => void;
      'onModalSecondaryAction'?: (event: CustomEvent) => void;
      'primaryActionText'?: string;
      'primaryDisabled'?: boolean;
      'primaryTitle'?: string;
      'secondaryActionText'?: string;
      'secondaryDisabled'?: boolean;
      'secondaryTitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarDivider {

    }
  }

  interface HTMLSaToolbarDividerElement extends StencilComponents.SaToolbarDivider, HTMLStencilElement {}

  var HTMLSaToolbarDividerElement: {
    prototype: HTMLSaToolbarDividerElement;
    new (): HTMLSaToolbarDividerElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-divider': HTMLSaToolbarDividerElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-divider': HTMLSaToolbarDividerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-divider': JSXElements.SaToolbarDividerAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarDividerAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarEnv {
      'env': string;
    }
  }

  interface HTMLSaToolbarEnvElement extends StencilComponents.SaToolbarEnv, HTMLStencilElement {}

  var HTMLSaToolbarEnvElement: {
    prototype: HTMLSaToolbarEnvElement;
    new (): HTMLSaToolbarEnvElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-env': HTMLSaToolbarEnvElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-env': HTMLSaToolbarEnvElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-env': JSXElements.SaToolbarEnvAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarEnvAttributes extends HTMLAttributes {
      'env'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarItem {
      'isActive': boolean;
      'url': string;
    }
  }

  interface HTMLSaToolbarItemElement extends StencilComponents.SaToolbarItem, HTMLStencilElement {}

  var HTMLSaToolbarItemElement: {
    prototype: HTMLSaToolbarItemElement;
    new (): HTMLSaToolbarItemElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-item': HTMLSaToolbarItemElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-item': HTMLSaToolbarItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-item': JSXElements.SaToolbarItemAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarItemAttributes extends HTMLAttributes {
      'isActive'?: boolean;
      'url'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarLogo {
      'url': string;
    }
  }

  interface HTMLSaToolbarLogoElement extends StencilComponents.SaToolbarLogo, HTMLStencilElement {}

  var HTMLSaToolbarLogoElement: {
    prototype: HTMLSaToolbarLogoElement;
    new (): HTMLSaToolbarLogoElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-logo': HTMLSaToolbarLogoElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-logo': HTMLSaToolbarLogoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-logo': JSXElements.SaToolbarLogoAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarLogoAttributes extends HTMLAttributes {
      'url'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarMenu {
      'menuItems': string;
    }
  }

  interface HTMLSaToolbarMenuElement extends StencilComponents.SaToolbarMenu, HTMLStencilElement {}

  var HTMLSaToolbarMenuElement: {
    prototype: HTMLSaToolbarMenuElement;
    new (): HTMLSaToolbarMenuElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-menu': HTMLSaToolbarMenuElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-menu': HTMLSaToolbarMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-menu': JSXElements.SaToolbarMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarMenuAttributes extends HTMLAttributes {
      'menuItems'?: string;
      'onSelected'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarNav {

    }
  }

  interface HTMLSaToolbarNavElement extends StencilComponents.SaToolbarNav, HTMLStencilElement {}

  var HTMLSaToolbarNavElement: {
    prototype: HTMLSaToolbarNavElement;
    new (): HTMLSaToolbarNavElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-nav': HTMLSaToolbarNavElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-nav': HTMLSaToolbarNavElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-nav': JSXElements.SaToolbarNavAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarNavAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarToolName {
      'tool': string;
    }
  }

  interface HTMLSaToolbarToolNameElement extends StencilComponents.SaToolbarToolName, HTMLStencilElement {}

  var HTMLSaToolbarToolNameElement: {
    prototype: HTMLSaToolbarToolNameElement;
    new (): HTMLSaToolbarToolNameElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-tool-name': HTMLSaToolbarToolNameElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-tool-name': HTMLSaToolbarToolNameElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-tool-name': JSXElements.SaToolbarToolNameAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarToolNameAttributes extends HTMLAttributes {
      'tool'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbarUser {
      'username': string;
    }
  }

  interface HTMLSaToolbarUserElement extends StencilComponents.SaToolbarUser, HTMLStencilElement {}

  var HTMLSaToolbarUserElement: {
    prototype: HTMLSaToolbarUserElement;
    new (): HTMLSaToolbarUserElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar-user': HTMLSaToolbarUserElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar-user': HTMLSaToolbarUserElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar-user': JSXElements.SaToolbarUserAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarUserAttributes extends HTMLAttributes {
      'username'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SaToolbar {
      'env': string;
      'hasNav': boolean;
      'hasSecondaryTool': boolean;
      'hasTool': boolean;
      'menuItems': string;
      'secondaryTool': string;
      'tool': string;
      'url': string;
      'username': string;
    }
  }

  interface HTMLSaToolbarElement extends StencilComponents.SaToolbar, HTMLStencilElement {}

  var HTMLSaToolbarElement: {
    prototype: HTMLSaToolbarElement;
    new (): HTMLSaToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'sa-toolbar': HTMLSaToolbarElement;
  }
  interface ElementTagNameMap {
    'sa-toolbar': HTMLSaToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sa-toolbar': JSXElements.SaToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface SaToolbarAttributes extends HTMLAttributes {
      'env'?: string;
      'hasNav'?: boolean;
      'hasSecondaryTool'?: boolean;
      'hasTool'?: boolean;
      'menuItems'?: string;
      'onMenuItemSelected'?: (event: CustomEvent) => void;
      'secondaryTool'?: string;
      'tool'?: string;
      'url'?: string;
      'username'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;